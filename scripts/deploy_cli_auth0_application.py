import requests
import time
import os
import json
import sys

# read access_token from ephemeral (generated by pipeline) file
with open('access_token', 'r') as file:
    auth_token = file.read().rstrip()

# request parameters
header = {"Authorization": f"Bearer {auth_token}"}
url = f"https://{os.environ.get('TENANT')}.us.auth0.com/api/v2/clients"
body = json.load(open('client/dpsctl-cli.json'))

# set cli application name
body['name'] = os.environ.get('TENANT_APPLICATION')

# check if the application exists
response = requests.get(url, headers=header)
applications = [app['name'] for app in response.json()]

if os.environ.get('TENANT_APPLICATION') in applications:
  # application definition already exists, use PATCH
  for app in response.json():
    if app['name'] == os.environ.get('TENANT_APPLICATION'):
      response = requests.patch(f"{url}/{app['client_id']}", headers=header, json=body)

else:
  # application definition does not exist, use POST
  response = requests.post(url, headers=header, json=body)

# write client-id to secrets store
client_id_result = os.system(f"op item edit team-twelve-svc-auth0 --vault cohorts {os.environ.get('TENANT')}-{os.environ.get('TENANT_APPLICATION')}-client-id={response.json()['client_id']}")
if client_id_result != 0:
  print("Error writing client id")
  sys.exit(1)

# Bug with opw writing too quickly causes a 400
time.sleep(1)

# write client-secret to secrets store
client_secret_result = os.system(f"op item edit team-twelve-svc-auth0 --vault cohorts {os.environ.get('TENANT')}-{os.environ.get('TENANT_APPLICATION')}-client-secret={response.json()['client_secret']}")
if client_secret_result != 0:
  print("Error writing client secret")
  sys.exit(1)
